{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jnynt\\\\Desktop\\\\AifSR\\\\webapp\\\\frontend\\\\src\\\\Inference.js\";\nimport * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport UserForm from './UserForm';\nimport axios from 'axios';\nimport ImageWindow from './ImageWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_URL = 'http://localhost:5000/upload';\nexport default class Inference extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadStatus: \"not_uploaded\",\n      image: 0,\n      mask: 0\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  handleSubmit(imagew, imageh, uploadFiles) {\n    const formData = new FormData();\n\n    for (let i = 0; i < uploadFiles.files.length; i++) {\n      formData.append(\"file\", uploadFiles.files[i]);\n    }\n\n    formData.append(\"imagew\", imagew);\n    formData.append(\"imageh\", imageh);\n    this.setState((state, props) => ({ ...this.state,\n      uploadStatus: \"processing\"\n    })); // this.setState({uploadStatus: \"processing\"}, ()=>{console.log(this.state.uploadStatus)})\n\n    axios.post(UPLOAD_URL, formData).then(async res => {\n      const blob = await res.data.blob();\n      const url = URL.createObjectURL(blob);\n      this.setState({\n        image: url\n      });\n      console.log(\"file upload success\"); // axios.get('http://localhost:5000/init_mask').then((res2) => {\n      //     this.setState((state, props) => ({\n      //         ...this.state,\n      //         mask: res2.data\n      //     }));\n      //     console.log('mask get success!')\n      // }).catch((err) => alert(\"mask_get_error\"));\n    }).catch(err => alert(err));\n    this.setState((state, props) => ({ ...this.state,\n      uploadStatus: \"done\"\n    }));\n  }\n\n  nextImage() {\n    axios.get(\"http://localhost:5000/next_image\").then(res => {\n      if (res !== \"error\") {\n        console.log(\"next_image\");\n        this.setState({\n          image: res.data\n        });\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  prevImage() {\n    axios.get(\"http://localhost:5000/prev_image\").then(res => {\n      if (res !== \"error\") {\n        console.log(\"prev_image\");\n        this.setState({\n          image: res.data\n        });\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  nextMask() {\n    axios.get(\"http://localhost:5000/next_mask\").then(res => {\n      if (res !== \"error\") {\n        console.log(\"next_mask\");\n        this.setState({\n          mask: res.data\n        });\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  prevMask() {\n    axios.get(\"http://localhost:5000/prev_mask\").then(res => {\n      if (res !== \"error\") {\n        console.log(\"prev_mask\");\n        this.setState({\n          mask: res.data\n        });\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  render() {\n    console.log(\"render: \" + this.state.uploadStatus);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(UserForm, {\n          submitCallback: (imagew, imageh, files) => this.handleSubmit(imagew, imageh, files),\n          statusUpdateCallback: param => this.setState({\n            uploadStatus: param\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(ImageWindow, {\n          uploadStatus: this.state.uploadStatus,\n          thisImage: this.state.image,\n          thisMask: this.state.mask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jnynt/Desktop/AifSR/webapp/frontend/src/Inference.js"],"names":["React","Grid","UserForm","axios","ImageWindow","UPLOAD_URL","Inference","Component","constructor","props","state","uploadStatus","image","mask","handleSubmit","bind","setState","imagew","imageh","uploadFiles","formData","FormData","i","files","length","append","post","then","res","blob","data","url","URL","createObjectURL","console","log","catch","err","alert","nextImage","get","prevImage","nextMask","prevMask","render","param"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport UserForm from './UserForm';\r\nimport axios from 'axios';\r\nimport ImageWindow from './ImageWindow';\r\n\r\nconst UPLOAD_URL = 'http://localhost:5000/upload';\r\n\r\nexport default class Inference extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadStatus: \"not_uploaded\",\r\n            image: 0,\r\n            mask: 0\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.setState = this.setState.bind(this);\r\n    }\r\n\r\n    handleSubmit(imagew, imageh, uploadFiles){\r\n        const formData = new FormData();\r\n        for (let i = 0; i < uploadFiles.files.length; i++){\r\n            formData.append(\"file\", uploadFiles.files[i]);\r\n        }\r\n        formData.append(\"imagew\", imagew);\r\n        formData.append(\"imageh\", imageh);\r\n\r\n        this.setState((state, props) => ({\r\n            ...this.state,\r\n            uploadStatus: \"processing\"\r\n        }));\r\n        \r\n        // this.setState({uploadStatus: \"processing\"}, ()=>{console.log(this.state.uploadStatus)})\r\n\r\n        axios.post(UPLOAD_URL, formData).then(async (res) => {\r\n            const blob = await res.data.blob()\r\n            const url = URL.createObjectURL(blob)\r\n            this.setState({image: url})\r\n            \r\n            console.log(\"file upload success\")\r\n            // axios.get('http://localhost:5000/init_mask').then((res2) => {\r\n            //     this.setState((state, props) => ({\r\n            //         ...this.state,\r\n            //         mask: res2.data\r\n            //     }));\r\n            //     console.log('mask get success!')\r\n            // }).catch((err) => alert(\"mask_get_error\"));\r\n        }).catch((err) => alert(err));\r\n        \r\n        this.setState((state, props) => ({\r\n            ...this.state,\r\n            uploadStatus: \"done\"\r\n        }));\r\n    }\r\n\r\n    nextImage(){\r\n        axios.get(\"http://localhost:5000/next_image\").then((res) => {\r\n            if (res !== \"error\"){\r\n                console.log(\"next_image\");\r\n                this.setState({image: res.data})\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    prevImage(){\r\n        axios.get(\"http://localhost:5000/prev_image\").then((res) => {\r\n            if (res !== \"error\"){\r\n                console.log(\"prev_image\");\r\n                this.setState({image: res.data})\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    nextMask(){\r\n        axios.get(\"http://localhost:5000/next_mask\").then((res) => {\r\n            if (res !== \"error\"){\r\n                console.log(\"next_mask\");\r\n                this.setState({mask: res.data})\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    prevMask(){\r\n        axios.get(\"http://localhost:5000/prev_mask\").then((res) => {\r\n            if (res !== \"error\"){\r\n                console.log(\"prev_mask\");\r\n                this.setState({mask: res.data})\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(\"render: \" + this.state.uploadStatus)\r\n        return(\r\n            <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n                <UserForm \r\n                    submitCallback={(imagew, imageh, files) => this.handleSubmit(imagew, imageh, files)}\r\n                    statusUpdateCallback={(param) => this.setState({uploadStatus: param})}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <ImageWindow uploadStatus={this.state.uploadStatus} thisImage={this.state.image} thisMask={this.state.mask}/>\r\n            </Grid>\r\n            </Grid>\r\n            \r\n        );\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}