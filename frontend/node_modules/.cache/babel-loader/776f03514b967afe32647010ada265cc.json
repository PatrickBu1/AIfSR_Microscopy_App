{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jnynt\\\\Desktop\\\\AifSR\\\\webapp\\\\frontend\\\\src\\\\Inference.js\";\nimport * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport UserForm from './UserForm';\nimport axios from 'axios';\nimport ImageWindow from './ImageWindow';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_URL = 'http://localhost:5000/upload';\nexport default class Inference extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadStatus: \"not_uploaded\",\n      renderCounter: 0,\n      index: 0\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n    this.download = this.download.bind(this);\n  }\n\n  handleSubmit(imagew, imageh, uploadFiles) {\n    const formData = new FormData();\n\n    for (let i = 0; i < uploadFiles.files.length; i++) {\n      formData.append(\"file\", uploadFiles.files[i]);\n    }\n\n    formData.append(\"imagew\", imagew);\n    formData.append(\"imageh\", imageh);\n    this.setState((state, props) => ({ ...this.state,\n      uploadStatus: \"processing\"\n    }));\n    axios.post(UPLOAD_URL, formData).then(res => {\n      this.setState((state, props) => ({ ...this.state,\n        uploadStatus: \"done\"\n      }));\n      console.log(\"file upload success\");\n    }).catch(err => alert(err));\n  }\n\n  nextImage() {\n    axios.get(\"http://localhost:5000/next_image\").then(res => {\n      console.log(res);\n\n      if (res.data !== \"error\") {\n        console.log(\"next_image\");\n        const ix = this.state.index + 1;\n        this.setState((state, props) => ({ ...this.state,\n          index: ix\n        }));\n      } else {\n        alert(\"no next image!\");\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  prevImage() {\n    axios.get(\"http://localhost:5000/prev_image\").then(res => {\n      if (res.data !== \"error\") {\n        console.log(\"prev_image\");\n        const ix = this.state.index - 1;\n        this.setState((state, props) => ({ ...this.state,\n          index: ix\n        }));\n      } else {\n        alert(\"no previous image!\");\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  download() {\n    axios.get(\"http://localhost:5000/download\", {\n      responseType: 'blob'\n    }).then(response => saveAs(response.blob(), 'results.zip'));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(UserForm, {\n          submitCallback: (imagew, imageh, files) => this.handleSubmit(imagew, imageh, files),\n          statusUpdateCallback: param => this.setState({\n            uploadStatus: param\n          }),\n          uploadStatus: this.state.uploadStatus,\n          donwnloadHandler: () => this.download()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(ImageWindow, {\n          uploadStatus: this.state.uploadStatus,\n          index: this.state.index,\n          prevImage: this.prevImage,\n          nextImage: this.nextImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jnynt/Desktop/AifSR/webapp/frontend/src/Inference.js"],"names":["React","Grid","UserForm","axios","ImageWindow","saveAs","UPLOAD_URL","Inference","Component","constructor","props","state","uploadStatus","renderCounter","index","handleSubmit","bind","nextImage","prevImage","download","imagew","imageh","uploadFiles","formData","FormData","i","files","length","append","setState","post","then","res","console","log","catch","err","alert","get","data","ix","responseType","response","blob","render","param"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport UserForm from './UserForm';\r\nimport axios from 'axios';\r\nimport ImageWindow from './ImageWindow';\r\nimport { saveAs } from 'file-saver'\r\n\r\nconst UPLOAD_URL = 'http://localhost:5000/upload';\r\n\r\nexport default class Inference extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadStatus: \"not_uploaded\",\r\n            renderCounter: 0,\r\n            index: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.nextImage = this.nextImage.bind(this);\r\n        this.prevImage = this.prevImage.bind(this);\r\n        this.download = this.download.bind(this);\r\n    }\r\n\r\n    handleSubmit(imagew, imageh, uploadFiles){\r\n        const formData = new FormData();\r\n        for (let i = 0; i < uploadFiles.files.length; i++){\r\n            formData.append(\"file\", uploadFiles.files[i]);\r\n        }\r\n        formData.append(\"imagew\", imagew);\r\n        formData.append(\"imageh\", imageh);\r\n\r\n        this.setState((state, props) => ({\r\n            ...this.state,\r\n            uploadStatus: \"processing\"\r\n        }));\r\n\r\n        axios.post(UPLOAD_URL, formData).then((res) => {\r\n            this.setState((state, props) => ({\r\n                ...this.state,\r\n                uploadStatus: \"done\"\r\n            }));\r\n            console.log(\"file upload success\")\r\n        }).catch((err) => alert(err));\r\n    }\r\n\r\n    nextImage(){\r\n        axios.get(\"http://localhost:5000/next_image\").then((res) => {\r\n            console.log(res)\r\n            if (res.data !== \"error\"){\r\n                console.log(\"next_image\");\r\n                const ix = this.state.index + 1\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    index: ix\r\n                }));         \r\n            }else{\r\n                alert(\"no next image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    prevImage(){\r\n        axios.get(\"http://localhost:5000/prev_image\").then((res) => {\r\n            if (res.data !== \"error\"){\r\n                console.log(\"prev_image\");\r\n                const ix = this.state.index - 1\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    index: ix\r\n                }));\r\n            }else{\r\n                alert(\"no previous image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    download(){\r\n        axios.get(\"http://localhost:5000/download\", {\r\n            responseType: 'blob',\r\n        })\r\n        .then(response => saveAs(response.blob(), 'results.zip'))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n                <UserForm \r\n                    submitCallback={(imagew, imageh, files) => this.handleSubmit(imagew, imageh, files)}\r\n                    statusUpdateCallback={(param) => this.setState({uploadStatus: param})}\r\n                    uploadStatus={this.state.uploadStatus}\r\n                    donwnloadHandler={()=>this.download()}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <ImageWindow uploadStatus={this.state.uploadStatus} index={this.state.index} prevImage={this.prevImage} nextImage={this.nextImage}/>\r\n            </Grid>\r\n            </Grid>\r\n            \r\n        );\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}