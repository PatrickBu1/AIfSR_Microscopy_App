[{"C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\index.js":"1","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\App.js":"2","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\Inference.js":"4","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\UserForm.js":"5","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\ImageWindow.js":"6"},{"size":534,"mtime":1650744327884,"results":"7","hashOfConfig":"8"},{"size":2694,"mtime":1651199225120,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1650137908184,"results":"10","hashOfConfig":"8"},{"size":3930,"mtime":1651249196613,"results":"11","hashOfConfig":"8"},{"size":2789,"mtime":1651245467644,"results":"12","hashOfConfig":"8"},{"size":2382,"mtime":1651119391809,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1e1d2fr",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\index.js",[],[],[],"C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\App.js",["36","37","38","39"],[],"import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { green, grey } from '@mui/material/colors';\nimport vipLogo from './assets/vip_logo.png'\nimport Inference from './Inference';\nimport { fontFamily } from '@mui/system';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\nexport const baseURL = \"localhost:5000/\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#57068c',\n    },\n    secondary: {\n      main:'#DEDEDE'\n    }\n  },\n  typography: {\n    fontSize: 16,\n    fontFamily: 'Arial'\n  },\n  spacing: 4\n});\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      imageLoaded: false,\n      currentPage: 0\n    };\n    // this binding to event handlers\n    this.aifsrRedirect = this.aifsrRedirect.bind(this);\n    this.pageRedirect = this.pageRedirect.bind(this);\n  }\n\n  aifsrRedirect(){\n    const newUrl = \"https://engineering.nyu.edu/research-innovation/student-research/vertically-integrated-projects/vip-teams/ai-scientific-research\";\n    window.location.href = newUrl;\n  }\n\n  pageRedirect(page){\n    this.setState({currentPage: page});\n  }\n\n  appBar = () => (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <img src={vipLogo} alt=\"Logo\" width={70} height={70} />\n        <Typography variant=\"h6\" color=\"inherit\" sx={{ margin: 4,  flexGrow: 1, fontFamily: 'Arial'}} noWrap>\n          NYU AIfSR Microscopy Team\n        </Typography>\n        <Button color=\"inherit\" onClick={() => this.pageRedirect(0)} sx={{margin: 2, fontFamily: 'Arial'}}>Demo Page</Button>\n        <Button color=\"inherit\" onClick={() => this.pageRedirect(1)} sx={{margin: 2, fontFamily: 'Arial'}}>Team Members</Button>\n        <Button color=\"inherit\" onClick={this.aifsrRedirect}>Model Used</Button>\n      </Toolbar>\n    </AppBar>\n  );\n\n  render(){\n    if (this.state.currentPage === 0){\n      return(\n        <ThemeProvider theme={theme}>\n        <this.appBar/>\n        <Box sx={{marginTop: 5, display: 'flex', flexDirection: 'column', alignItems: 'center',}}>\n          <Typography mx={{margin: 30, fontFamily: \"Arial\", fontSize: 30}}>\n            Semantic Segmentation - Sperm Image Demo\n          </Typography>\n        </Box>\n        <Inference/>\n        </ThemeProvider>\n         \n      );\n    }\n    else{\n      return(\n        <ThemeProvider theme={theme}>\n        <this.appBar/>\n        <h1>THIS IS THE TEAM PAGE</h1>\n        </ThemeProvider>\n      );\n    }\n    \n  }\n}","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\Inference.js",["40"],[],"import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport UserForm from './UserForm';\r\nimport axios from 'axios';\r\nimport ImageWindow from './ImageWindow';\r\nimport { saveAs } from 'file-saver'\r\nimport Button from '@mui/material/Button';\r\nimport { padding } from '@mui/system';\r\nimport Container from '@mui/material/Container';\r\n\r\nconst UPLOAD_URL = 'http://localhost:5000/upload';\r\n\r\nexport default class Inference extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadStatus: \"not_uploaded\",\r\n            renderCounter: 0,\r\n            index: 0,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.nextImage = this.nextImage.bind(this);\r\n        this.prevImage = this.prevImage.bind(this);\r\n        this.download = this.download.bind(this);\r\n    }\r\n\r\n    handleSubmit(imagew, imageh, uploadFiles){\r\n        const formData = new FormData();\r\n        for (let i = 0; i < uploadFiles.files.length; i++){\r\n            formData.append(\"file\", uploadFiles.files[i]);\r\n        }\r\n        formData.append(\"imagew\", imagew);\r\n        formData.append(\"imageh\", imageh);\r\n\r\n        this.setState((state, props) => ({\r\n            ...this.state,\r\n            uploadStatus: \"processing\"\r\n        }));\r\n\r\n        axios.post(UPLOAD_URL, formData).then((res) => {\r\n            this.setState((state, props) => ({\r\n                ...this.state,\r\n                uploadStatus: \"done\"\r\n            }));\r\n            console.log(\"file upload success\")\r\n        }).catch((err) => alert(err));\r\n    }\r\n\r\n    nextImage(){\r\n        axios.get(\"http://localhost:5000/next_image\").then((res) => {\r\n            console.log(res)\r\n            if (res.data !== \"error\"){\r\n                console.log(\"next_image\");\r\n                const ix = this.state.index + 1\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    index: ix\r\n                }));         \r\n            }else{\r\n                alert(\"no next image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    prevImage(){\r\n        axios.get(\"http://localhost:5000/prev_image\").then((res) => {\r\n            if (res.data !== \"error\"){\r\n                console.log(\"prev_image\");\r\n                const ix = this.state.index - 1\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    index: ix\r\n                }));\r\n            }else{\r\n                alert(\"no previous image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    download(){\r\n        saveAs(\"http://localhost:5000/download\", 'results.zip')\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n                <UserForm \r\n                    submitCallback={(imagew, imageh, files) => this.handleSubmit(imagew, imageh, files)}\r\n                    statusUpdateCallback={(param) => this.setState({uploadStatus: param})}\r\n                />\r\n                <DownloadButton status = {this.state.uploadStatus} onClick = {()=>this.download()}/>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <ImageWindow uploadStatus={this.state.uploadStatus} index={this.state.index} prevImage={this.prevImage} nextImage={this.nextImage}/>\r\n            </Grid>\r\n            </Grid>\r\n            \r\n        );\r\n    }\r\n    \r\n}\r\n\r\n\r\nfunction DownloadButton(props){\r\n    console.log(\"button: \"+ props.status)\r\n    if(props.status === \"done\"){\r\n        return(\r\n            <Container maxWidth=\"xs\">\r\n            <Button \r\n                variant=\"outlined\" \r\n                sx={{ mt: 3, mb: 2}}\r\n                onClick = {props.onClick}\r\n            > \r\n            Download\r\n            </Button>\r\n            </Container>\r\n        );\r\n    }else{\r\n        return(<p></p>);\r\n    }\r\n}","C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\UserForm.js",[],[],"C:\\Users\\jnynt\\Desktop\\AifSR\\webapp\\frontend\\src\\ImageWindow.js",["41","42","43"],[],"import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { Container, Typography, Button} from '@mui/material';\r\nimport {useImage} from 'react-image'\r\n\r\nexport default function ImageWindow(props){\r\n    return(\r\n        <Container maxWidth='lg' fixed>\r\n            <Box \r\n                width={'100%'}\r\n                height={500}\r\n                display=\"flex\" \r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                sx={{backgroundColor: 'secondary.main',\r\n                    borderRadius: 3,\r\n                    border: 1,\r\n                    borderStyle: 'solid'\r\n                }}>\r\n                <CenterItem  index={props.index} uploadStatus={props.uploadStatus} prevImage={props.prevImage} nextImage={props.nextImage}/>\r\n                \r\n            </Box>\r\n        </Container>\r\n    );    \r\n}\r\n\r\n\r\nfunction CenterItem(props){\r\n    if (props.uploadStatus === \"not_uploaded\"){\r\n        return(\r\n            <Typography>output image preview will be shown here after uploading.</Typography>\r\n        );\r\n    }else if (props.uploadStatus === \"processing\"){\r\n        return(\r\n            <CircularProgress color=\"primary\" />\r\n        );\r\n    }else{\r\n        const imgSrc = 'http://localhost:5000/get_image/' + (props.index).toString()\r\n        const maskSrc = 'http://localhost:5000/get_mask/' + (props.index).toString()\r\n        return(\r\n            <Container maxWidth='xl'>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                    <img src={imgSrc} style={{margin: 10}}width={450} height={400}></img>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <img src={maskSrc} style={{margin: 10}} width={450} height={400} ></img>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                    <Button variant=\"outlined\" onClick={props.prevImage} fullWidth>Previous Image</Button>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Button variant=\"outlined\" onClick={props.nextImage} fullWidth>Next Image</Button>\r\n                </Grid>\r\n            </Grid>\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n}",{"ruleId":"44","severity":1,"message":"45","line":7,"column":10,"nodeType":"46","messageId":"47","endLine":7,"endColumn":15},{"ruleId":"44","severity":1,"message":"48","line":7,"column":17,"nodeType":"46","messageId":"47","endLine":7,"endColumn":21},{"ruleId":"44","severity":1,"message":"49","line":10,"column":10,"nodeType":"46","messageId":"47","endLine":10,"endColumn":20},{"ruleId":"44","severity":1,"message":"50","line":12,"column":8,"nodeType":"46","messageId":"47","endLine":12,"endColumn":12},{"ruleId":"44","severity":1,"message":"51","line":8,"column":10,"nodeType":"46","messageId":"47","endLine":8,"endColumn":17},{"ruleId":"44","severity":1,"message":"52","line":6,"column":9,"nodeType":"46","messageId":"47","endLine":6,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":46,"column":21,"nodeType":"55","endLine":46,"endColumn":84},{"ruleId":"53","severity":1,"message":"54","line":49,"column":21,"nodeType":"55","endLine":49,"endColumn":87},"no-unused-vars","'green' is defined but never used.","Identifier","unusedVar","'grey' is defined but never used.","'fontFamily' is defined but never used.","'Grid' is defined but never used.","'padding' is defined but never used.","'useImage' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]