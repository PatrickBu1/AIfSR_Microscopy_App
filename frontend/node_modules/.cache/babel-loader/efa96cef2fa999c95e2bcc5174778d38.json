{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jnynt\\\\Desktop\\\\AifSR\\\\webapp\\\\frontend\\\\src\\\\Inference.js\";\nimport * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport UserForm from './UserForm';\nimport axios from 'axios';\nimport ImageWindow from './ImageWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_URL = 'http://localhost:5000/upload';\nexport default class Inference extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadStatus: \"not_uploaded\",\n      image: null,\n      mask: null //renderCounter: 0\n\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n  }\n\n  handleSubmit(imagew, imageh, uploadFiles) {\n    const formData = new FormData();\n\n    for (let i = 0; i < uploadFiles.files.length; i++) {\n      formData.append(\"file\", uploadFiles.files[i]);\n    }\n\n    formData.append(\"imagew\", imagew);\n    formData.append(\"imageh\", imageh);\n    this.setState((state, props) => ({ ...this.state,\n      uploadStatus: \"processing\"\n    }));\n    axios.post(UPLOAD_URL, formData).then(res => {\n      axios.get(\"http://localhost:5000/get_image\").then(res => {\n        this.setState((state, props) => ({ ...this.state,\n          image: res.data\n        }));\n      });\n      axios.get(\"http://localhost:5000/get_image\").then(res => {\n        this.setState((state, props) => ({ ...this.state,\n          mask: res.data\n        }));\n      });\n      this.setState((state, props) => ({ ...this.state,\n        uploadStatus: \"done\"\n      }));\n      console.log(\"file upload success\");\n    }).catch(err => alert(err));\n  }\n\n  nextImage() {\n    axios.get(\"http://localhost:5000/next_image\").then(res => {\n      if (res.body !== \"error\") {\n        console.log(\"next_image\");\n        axios.get(\"http://localhost:5000/get_image\").then(res => {\n          this.setState((state, props) => ({ ...this.state,\n            image: res.data\n          }));\n        });\n      } else {\n        alert(\"no next image!\");\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  prevImage() {\n    axios.get(\"http://localhost:5000/prev_image\").then(res => {\n      if (res.body !== \"error\") {\n        console.log(\"prev_image\");\n        axios.get(\"http://localhost:5000/get_mask\").then(res => {\n          this.setState((state, props) => ({ ...this.state,\n            mask: res.data\n          }));\n        });\n      } else {\n        alert(\"no previous image!\");\n      }\n    }).catch(err => alert(\"Request Error\"));\n  }\n\n  render() {\n    console.log(\"render: \" + this.state.uploadStatus);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(UserForm, {\n          submitCallback: (imagew, imageh, files) => this.handleSubmit(imagew, imageh, files),\n          statusUpdateCallback: param => this.setState({\n            uploadStatus: param\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: /*#__PURE__*/_jsxDEV(ImageWindow, {\n          uploadStatus: this.state.uploadStatus,\n          image: this.state.image,\n          mask: this.state.mask,\n          prevImage: this.prevImage,\n          nextImage: this.nextImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jnynt/Desktop/AifSR/webapp/frontend/src/Inference.js"],"names":["React","Grid","UserForm","axios","ImageWindow","UPLOAD_URL","Inference","Component","constructor","props","state","uploadStatus","image","mask","handleSubmit","bind","nextImage","prevImage","imagew","imageh","uploadFiles","formData","FormData","i","files","length","append","setState","post","then","res","get","data","console","log","catch","err","alert","body","render","param"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport UserForm from './UserForm';\r\nimport axios from 'axios';\r\nimport ImageWindow from './ImageWindow';\r\n\r\nconst UPLOAD_URL = 'http://localhost:5000/upload';\r\n\r\nexport default class Inference extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            uploadStatus: \"not_uploaded\",\r\n            image: null,\r\n            mask: null,\r\n            //renderCounter: 0\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.nextImage = this.nextImage.bind(this);\r\n        this.prevImage = this.prevImage.bind(this);\r\n    }\r\n\r\n    handleSubmit(imagew, imageh, uploadFiles){\r\n        const formData = new FormData();\r\n        for (let i = 0; i < uploadFiles.files.length; i++){\r\n            formData.append(\"file\", uploadFiles.files[i]);\r\n        }\r\n        formData.append(\"imagew\", imagew);\r\n        formData.append(\"imageh\", imageh);\r\n\r\n        this.setState((state, props) => ({\r\n            ...this.state,\r\n            uploadStatus: \"processing\"\r\n        }));\r\n\r\n        axios.post(UPLOAD_URL, formData).then((res) => {\r\n            axios.get(\"http://localhost:5000/get_image\").then((res) =>{\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    image: res.data\r\n                }));\r\n            });\r\n            axios.get(\"http://localhost:5000/get_image\").then((res) =>{\r\n                this.setState((state, props) => ({\r\n                    ...this.state,\r\n                    mask: res.data\r\n                }));\r\n            });\r\n\r\n            this.setState((state, props) => ({\r\n                ...this.state,\r\n                uploadStatus: \"done\"\r\n            }));\r\n            console.log(\"file upload success\")\r\n        }).catch((err) => alert(err));\r\n    }\r\n\r\n    nextImage(){\r\n        axios.get(\"http://localhost:5000/next_image\").then((res) => {\r\n            if (res.body !== \"error\"){\r\n                console.log(\"next_image\");\r\n                axios.get(\"http://localhost:5000/get_image\").then((res) =>{\r\n                    this.setState((state, props) => ({\r\n                        ...this.state,\r\n                        image: res.data\r\n                    }));\r\n                });\r\n            }else{\r\n                alert(\"no next image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    prevImage(){\r\n        axios.get(\"http://localhost:5000/prev_image\").then((res) => {\r\n            if (res.body !== \"error\"){\r\n                console.log(\"prev_image\");\r\n                axios.get(\"http://localhost:5000/get_mask\").then((res) =>{\r\n                    this.setState((state, props) => ({\r\n                        ...this.state,\r\n                        mask: res.data\r\n                    }));\r\n                });\r\n            }else{\r\n                alert(\"no previous image!\")\r\n            }\r\n        }).catch((err) => alert(\"Request Error\"));\r\n    }\r\n\r\n    render(){\r\n        console.log(\"render: \" + this.state.uploadStatus)\r\n        return(\r\n            <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n                <UserForm \r\n                    submitCallback={(imagew, imageh, files) => this.handleSubmit(imagew, imageh, files)}\r\n                    statusUpdateCallback={(param) => this.setState({uploadStatus: param})}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <ImageWindow uploadStatus={this.state.uploadStatus} image={this.state.image} mask={this.state.mask} prevImage={this.prevImage} nextImage={this.nextImage}/>\r\n            </Grid>\r\n            </Grid>\r\n            \r\n        );\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}